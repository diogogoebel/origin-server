#!/usr/bin/env oo-ruby
#--
# Copyright 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'optparse'
require 'openshift-origin-node/utils/selinux'
require 'openshift-origin-node/utils/cgroups/libcgroup'
require 'openshift-origin-node'

GEAR_ADMIN_OPTIONS = {}

optparse = OptionParser.new { |opts|
    opts.banner = "Usage: oo-admin-gear --action ACTION --uuid UUID\n
Mandatory arguments: ACTION and gear UUID\n\n"

    opts.on('-a', '--action ACTION', String, "Specify action
Available actions: destroygear (cleanup stale files for a gear)\n\n") do |action|
        GEAR_ADMIN_OPTIONS[:action] = action
    end

    opts.on('-u', '--uuid UUID', String, 'Specify gear uuid') do |uuid|
        GEAR_ADMIN_OPTIONS[:uuid] = uuid
    end
}

begin
    optparse.parse!
    mandatory = [:action, :uuid]
    missing = mandatory.select{ |param| GEAR_ADMIN_OPTIONS[param].nil? }
    if not missing.empty?
        puts optparse
        exit
    end                      
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    puts $!.to_s
    puts optparse
    exit
end  

action = GEAR_ADMIN_OPTIONS[:action]
uuid = GEAR_ADMIN_OPTIONS[:uuid]

if action == 'destroygear'
    puts 'Killing user processes...'
    process_delete = %x[skill #{uuid}]
    puts process_delete if $?.exitstatus != 0

    puts 'Deleting user...'
    user_delete = %x[userdel --remove -f #{uuid}]
    puts user_delete if $?.exitstatus != 0

    puts 'Deleting tc user info...'
    tc_user_delete = %x[rm /var/lib/openshift/.tc_user_dir/#{uuid}_throttle]
    puts tc_user_delete if $?.exitstatus != 0

    puts 'Deleting stale user home dir...'
    user_home_delete = %x[rm -r /var/lib/openshift/#{uuid}]
    puts user_home_delete if $?.exitstatus != 0

    puts 'Deleting gear access info...'
    app_last_access_delete = %x[rm -r /var/lib/openshift/.last_access/#{uuid}]
    puts app_last_access_delete if $?.exitstatus != 0

    puts 'Deleting gear pam limits files...'
    user_pam_limits_delete = %x[rm /etc/security/limits.d/*-#{uuid}.conf]
    puts user_pam_limits_delete if $?.exitstatus != 0

    puts 'Deleting cgroup info...'
    OpenShift::Runtime::Utils::Cgroups::Libcgroup.new(uuid).delete

    puts 'Deleting stale info from /var/lib/openshift/.httpd.d/ files...'
    OpenShift::Runtime::FrontendHttpServer.purge(uuid)
else
    puts 'No matching action found'
end
