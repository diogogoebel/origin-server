= breadcrumb_for_application @application, I18n.t(:storage_title)
= content_for :page_title, I18n.t(:storage_title)

%h1= I18n.t(:storage_title)

%section#storage-gear-groups
  %section
    %p= I18n.t(:storage_caption_1)

    %p= I18n.t(:storage_caption_2)

  %section
    %h3= I18n.t(:Check_Your_Usage)
    %p
      = I18n.t(:storage_check_usage)

      %pre.cli
        = preserve do
          :escaped
            $ ssh #{@application.ssh_string}
            > quota

  -# This will only render if we have this partial, like in Online or if an admin wants to provide information
  = render('increase_storage') unless @can_modify_storage

  - @gear_groups.each_with_index do |group,g|
    :ruby
      cartridge = group.cartridges.first
      other_carts = group.cartridges - [cartridge]
    .gear-group.tile
      %h2
        = cartridge.display_name
        %span.pull-right= scaled_cartridge_storage(cartridge)

      %p= I18n.t(:storage_space, gb: cartridge.base_gear_storage)

      - if cartridge.scales?
        %p= I18n.t(:storage_extra)

      - unless other_carts.empty?
        %p= I18n.t(:storage_shared)
        %ul
          - other_carts.each do |cart|
            %li= cart.display_name

      - if @can_modify_storage
        = semantic_form_for cartridge,
                            :simple => true,
                            :method => :put,
                            :url => application_storage_cartridge_path(@application.id, cartridge.name) do |f|

          -# Currently storage errors are reported in :base, but this will properly handle :additional_gear_storage errors
          = f.semantic_errors :except => :additional_gear_storage
          = f.inputs :inline => true do
            .input-prepend
              %span.add-on= I18n.t(:Add_Storage)
              :ruby
                default_html = {
                  :style => 'width: auto',
                  :title => I18n.t(:Additional_Storage),
                }
              = f.input :additional_gear_storage, storage_options(0,@max_storage).merge({:input_html => default_html})

            = f.commit_button :label => I18n.t(:Save), :button_html => {:class => 'btn btn-small'}
            = f.loading

  %p
    = I18n.t(:storage_info)
    #{link_to I18n.t(:storage_info_link), storage_help_url}.

- content_for :javascripts do
  - if @can_modify_storage
    :javascript
      jQuery('#storage-gear-groups FORM :input').change(function() {
        jQuery(this).closest('form').find('INPUT.btn').addClass('btn-danger');
      });
