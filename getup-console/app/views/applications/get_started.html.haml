= breadcrumb_for_application @application, @wizard ? I18n.t(:Next_Steps) : I18n.t(:Get_Started)

- if @wizard
  = app_wizard_steps_create 2, :completed => true
  %h1.invisible= I18n.t(:Get_Started)
  %section
    = flashes
    %p.larger= I18n.t(:app_create_next_steps)

- else
  %h1= I18n.t(:Get_Started)
  %section
    = flashes
    %p.larger= I18n.t(:app_create_get_started)


%section.row
  .span8
    -# application url
    %h2= I18n.t(:app_acessing)
    %p
      - if true #FIXME Need to come up with a better way to control this in the model.  Requires info about carts.
        = I18n.t(:app_create_caption_2)
      - else
        = I18n.t(:app_create_caption_3)

      %p.well.application-url{:style => "font-size: 20px"}
        = link_to @application.web_url, @application.web_url, :target => '_blank'

    %p!= I18n.t(:app_create_summary, app: link_to(I18n.t(:app_create_summary_link), application_path(@application)))

    -# git/setup
    - if true #FIXME has at least one cartridge with source code
      %h2= I18n.t(:app_create_code_change)

      - unless @has_keys
        %div.well
          %h4= I18n.t(:app_create_set_key)
          %p!= I18n.t(:app_create_set_key_caption, ssh: link_to(I18n.t(:app_create_set_key_ssh), ssh_keys_help_path))
          = render :partial => 'keys/simple_form', :locals => { :key => Key.new, :input_class => 'span6' }

      %p!= I18n.t(:app_create_git, git: link_to(I18n.t(:app_create_git_url), git_homepage_url))

      - if @has_keys
        - if true #FIXME has a single cartridge with source code
          %p= I18n.t(:app_create_git_inst)
          %pre.cli
            = preserve do
              :escaped
                git clone #{@application.git_url}
                cd #{@application.name}/
          %p
            = I18n.t(:app_create_git_caption_a)
            %strong
              %em
                add,
            %strong
              %em
                commit,
            e
            %strong
              %em
                push
            = I18n.t(:app_create_git_caption_b)
          %pre.cli
            = preserve do
              git add .
              =I18n.t(:git_commit_mesg)
              git push

          %p!= I18n.t(:app_create_git_caption_2, hooks: link_to(I18n.t(:app_create_git_hooks), deploy_hook_user_guide_topic_url))

        - else
          -#FIXME has multiple cartridges with source code


  .span4

    -# cartridges
    %h2= I18n.t(:Adding_capabilities)
    %p!= I18n.t(:add_cap,
      cart: link_to(I18n.t(:adding_a_cart), application_cartridge_types_path(@application)),
      mysql: link_to('MySQL', application_cartridge_type_path(@application, 'mysql-5.1')),
      mongodb: link_to('MongoDB', application_cartridge_type_path(@application, 'mongodb-2.2')))

    -#%p
      To run a PHP application with MySQL (the M and P in LAMP) you 
      %strong embed
      the MySQL cartridge into your application. OpenShift gives your PHP code access to your new MySQL database, but
      manages the database server for you.
    %p 
      = link_to I18n.t(:add_cart_now), application_cartridge_types_path(@application)
      -#or from the command line with
    -#%pre.cli
      = preserve do
        :escaped
          rhc cartridge list
    -#%p
      You may also add a cartridge to your application by running
    -#%pre.cli
      = preserve do
        :escaped
          rhc cartridge add -a #{@application.name} -c <cart_id>

    -# client
    %h2= I18n.t(:manage_app)

    %h3 RHC Client Tools

    %p!= I18n.t(:rhc_caption, link: link_to(I18n.t(:rhc_link),client_tools_install_help_url))
    %p
      //After installing the command line tool read more 
      //#{link_to "on how to manage your application from the command line in our User Guide", user_guide_url }.
    -# tech specific
